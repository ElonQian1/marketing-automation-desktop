// src/pages/SmartScriptBuilderPage_New.tsx
// module: ui | layer: ui | role: page
// summary: È°µÈù¢ÁªÑ‰ª∂

import React, { useState, useEffect, useCallback, useMemo } from "react";
import { useAdb } from "../application/hooks/useAdb";
// import { DeviceStatus } from "../domain/adb/entities/Device"; // Â∑≤ÈÄöËøá useDefaultDeviceId Áªü‰∏ÄÈªòËÆ§ÈÄâÊã©Ôºå‰∏çÂÜçÁõ¥Êé•‰ΩøÁî®
import { useDefaultDeviceId } from "../application/hooks/useDefaultDeviceId";
import { Row, Col, Typography, Form, message } from "antd";

// üÜï ÂØºÂÖ•Ê®°ÂùóÂåñÁªÑ‰ª∂
import StepListPanel from "./SmartScriptBuilderPage/components/StepListPanel";
import ScriptControlPanel from "./SmartScriptBuilderPage/components/ScriptControlPanel";
import PageHeader from "./SmartScriptBuilderPage/components/PageHeader";
import { SmartStepEditorModal } from "./SmartScriptBuilderPage/components/smart-step-adder/SmartStepEditorModal";

// üÜï ÂØºÂÖ•Hooks
import { useStepForm } from "./SmartScriptBuilderPage/hooks/useStepForm";
import { usePageFinder } from "./SmartScriptBuilderPage/hooks/usePageFinder";
import { useLoopManagement } from "./SmartScriptBuilderPage/components/loop-management";
import { useContactImport } from "./SmartScriptBuilderPage/components/contact-import";

// üÜï ÂØºÂÖ•Á±ªÂûãÂíåÊúçÂä°
import type { ExtendedSmartScriptStep, LoopConfig } from "../types/loopScript";
import type { ExecutorConfig, SmartExecutionResult } from "../types/execution";
import { DistributedStepLookupService } from "../application/services/DistributedStepLookupService";
import { DistributedStep } from "../domain/distributed-script";
import { generateXmlHash } from "../types/selfContainedScript";
import { PageAnalysisApplicationService } from "../application/page-analysis/PageAnalysisApplicationService";
import { PageAnalysisRepositoryFactory } from "../infrastructure/repositories/PageAnalysisRepositoryFactory";

// üÜï ÂØºÂÖ•Ê®°ÊÄÅÊ°ÜÁªÑ‰ª∂
import { LaunchAppSmartComponent } from "../components/smart/LaunchAppSmartComponent";
import { SmartNavigationModal } from "../components";
import { UniversalPageFinderModal } from "../components/universal-ui/UniversalPageFinderModal";
import { ContactWorkflowSelector } from "../modules/contact-automation";
import { DistributedScriptQualityPanel } from "../modules/distributed-script-quality/DistributedScriptQualityPanel";

const { Title, Paragraph } = Typography;

// ==================== ‰∏ªÁªÑ‰ª∂ ====================
const SmartScriptBuilderPage: React.FC = () => {
  // ADB Hook Ëé∑ÂèñËÆæÂ§á‰ø°ÊÅØ
  const { devices, refreshDevices } = useAdb();
  const { defaultDeviceId, hasDevices } = useDefaultDeviceId({
    preferSelected: true,
    autoSelectOnMount: false,
  });

  // ÂàõÂª∫È°µÈù¢ÂàÜÊûêÊúçÂä°ÂÆû‰æã
  const pageAnalysisService = React.useMemo(() => {
    try {
      const pageAnalysisRepository =
        PageAnalysisRepositoryFactory.getPageAnalysisRepository();
      const deviceUIStateRepository =
        PageAnalysisRepositoryFactory.getDeviceUIStateRepository();
      return new PageAnalysisApplicationService(
        pageAnalysisRepository,
        deviceUIStateRepository
      );
    } catch (error) {
      console.error("ÂàõÂª∫È°µÈù¢ÂàÜÊûêÊúçÂä°Â§±Ë¥•:", error);
      return null;
    }
  }, []);

  // ==================== Áä∂ÊÄÅÁÆ°ÁêÜ ====================
  const [steps, setSteps] = useState<ExtendedSmartScriptStep[]>([]);
  const [loopConfigs, setLoopConfigs] = useState<LoopConfig[]>([]);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isExecuting, setIsExecuting] = useState(false);
  const [editingStep, setEditingStep] =
    useState<ExtendedSmartScriptStep | null>(null);
  const [currentDeviceId, setCurrentDeviceId] = useState<string>("");
  const [showAppComponent, setShowAppComponent] = useState(false);
  const [showNavigationModal, setShowNavigationModal] = useState(false);
  const [lastNavigationConfig, setLastNavigationConfig] = useState<{
    app_name?: string;
    navigation_type?: string;
  } | null>(null);
  const [executorConfig, setExecutorConfig] = useState<ExecutorConfig>({
    default_timeout_ms: 10000,
    default_retry_count: 3,
    page_recognition_enabled: true,
    auto_verification_enabled: true,
    smart_recovery_enabled: true,
    detailed_logging: true,
  });
  const [executionResult, setExecutionResult] =
    useState<SmartExecutionResult | null>(null);
  const [showContactWorkflowSelector, setShowContactWorkflowSelector] =
    useState(false);
  const [isScriptValid, setIsScriptValid] = useState<boolean>(true);
  const [showQualityPanel, setShowQualityPanel] = useState<boolean>(false);

  // Âè™ÊúâÂú®Ê®°ÊÄÅÊ°ÜÂèØËßÅÊó∂ÊâçÂàõÂª∫formÂÆû‰æãÔºåÈÅøÂÖçuseFormË≠¶Âëä
  const [form] = isModalVisible ? Form.useForm() : [null];

  // üÜï ‰ΩøÁî®Ê®°ÂùóÂåñHooks
  const stepFormHook = useStepForm({
    form, // ‚úÖ ‰º†ÈÄíformÂÆû‰æã
    steps,
    setSteps,
    devices,
    currentDeviceId,
    currentXmlContent: "", // ÂàùÂßãÂÄº
    currentDeviceInfo: {},
    currentPageInfo: {},
    setShowContactWorkflowSelector,
    setSnapshotFixMode: () => {}, // ÊöÇÊó∂Á©∫ÂÆûÁé∞
    setPendingAutoResave: () => {},
    setIsQuickAnalyzer: () => {},
    setEditingStepForParams: () => {},
    setShowPageAnalyzer: () => {},
    allowSaveWithoutXmlOnce: false,
    setAllowSaveWithoutXmlOnce: () => {},
  });

  const pageFinderHook = usePageFinder({
    steps,
    setSteps,
    form,
    currentDeviceId,
    devices,
    showAddModal: (options) => {
      if (options?.resetFields !== false) {
        form.resetFields();
      }
      setIsModalVisible(true);
    },
    setEditingStep,
    handleSaveStep: stepFormHook.handleSaveStep,
  });

  // ÈÄÇÈÖçÊñ∞Á≠æÂêçÔºöuseLoopManagement(steps, setSteps)
  const loopManagementHook = useLoopManagement(steps, setSteps);

  // ÈÄÇÈÖçÊñ∞Á≠æÂêçÔºöuseContactImport(steps, setSteps)
  const contactImportHook = useContactImport(steps, setSteps);

  // üÜï ÂΩìÊ≠•È™§ÂèòÂåñÊó∂ÔºåÂêåÊ≠•Âà∞ÂàÜÂ∏ÉÂºèÊ≠•È™§Êü•ÊâæÊúçÂä°
  useEffect(() => {
    const distributedSteps: DistributedStep[] = steps
      .map((step) => {
        const p: any = step.parameters || {};
        const embedded = p.xmlSnapshot;
        const xmlContent: string | undefined =
          embedded?.xmlContent || p.xmlContent;
        if (!xmlContent) return null;

        const stepXml = {
          xmlContent,
          xmlHash: embedded?.xmlHash || generateXmlHash(xmlContent),
          timestamp: embedded?.timestamp || Date.now(),
          deviceInfo:
            embedded?.deviceInfo || p.deviceInfo || p.deviceId
              ? {
                  deviceId:
                    embedded?.deviceInfo?.deviceId || p.deviceId || "unknown",
                  deviceName:
                    embedded?.deviceInfo?.deviceName ||
                    p.deviceName ||
                    "Unknown Device",
                }
              : undefined,
          pageInfo:
            embedded?.deviceInfo || p.pageInfo
              ? {
                  appPackage:
                    embedded?.deviceInfo?.appPackage ||
                    p.pageInfo?.appPackage ||
                    "com.xingin.xhs",
                  activityName:
                    embedded?.deviceInfo?.activityName ||
                    p.pageInfo?.activityName,
                  pageTitle:
                    embedded?.pageInfo?.pageTitle || p.pageInfo?.pageTitle,
                }
              : undefined,
        } as any;

        const locator = p.locator || {
          absoluteXPath: p.xpath || "",
          attributes: {
            resourceId: p.resource_id,
            text: p.text,
            contentDesc: p.content_desc,
            className: p.class_name,
          },
        };

        const ds: DistributedStep = {
          id: step.id,
          name: step.name || `Ê≠•È™§_${step.id}`,
          actionType: step.step_type || "click",
          params: p,
          locator,
          createdAt: Date.now(),
          description: step.description,
          xmlSnapshot: stepXml,
        } as DistributedStep;
        return ds;
      })
      .filter((v): v is DistributedStep => !!v);

    DistributedStepLookupService.setGlobalScriptSteps(distributedSteps);
    console.log("üîÑ ÂêåÊ≠•Ê≠•È™§Âà∞ÂàÜÂ∏ÉÂºèÊü•ÊâæÊúçÂä°:", {
      totalSteps: steps.length,
      distributedSteps: distributedSteps.length,
      stepIds: distributedSteps.map((s) => s.id),
    });
  }, [steps]);

  // ÂàùÂßãÂåñËÆæÂ§áÈÄâÊã©
  useEffect(() => {
    refreshDevices();
  }, [refreshDevices]);

  // ÂΩìÈªòËÆ§ËÆæÂ§áÂèòÂåñÊó∂ÔºåËã•È°µÈù¢Êú¨Âú∞Êú™ÈÄâÊã©ËÆæÂ§áÔºåÂàôÂ∫îÁî®ÈªòËÆ§ËÆæÂ§á
  useEffect(() => {
    if (!currentDeviceId && defaultDeviceId) {
      setCurrentDeviceId(defaultDeviceId);
    }
  }, [currentDeviceId, defaultDeviceId]);

  // ==================== ‰∫ã‰ª∂Â§ÑÁêÜÂáΩÊï∞ ====================
  const handleNavigationConfigChange = useCallback(
    (config: { app_name?: string; navigation_type?: string }) => {
      console.log("üì• Êé•Êî∂Âà∞ÈÖçÁΩÆÂèòÂåñ:", config);
      setLastNavigationConfig(config);
    },
    []
  );

  const handleNavigationModalClose = useCallback(() => {
    setShowNavigationModal(false);
  }, []);

  const handleEditStep = (step: ExtendedSmartScriptStep) => {
    setEditingStep(step);
    form.setFieldsValue({
      step_type: step.step_type,
      name: step.name,
      description: step.description,
      ...step.parameters,
    });
    setIsModalVisible(true);
  };

  const handleDeleteStep = (stepId: string) => {
    setSteps((prev) => prev.filter((s) => s.id !== stepId));
    message.success("Ê≠•È™§Âà†Èô§ÊàêÂäü");
  };

  const handleToggleStep = (stepId: string) => {
    setSteps((prev) =>
      prev.map((s) => (s.id === stepId ? { ...s, enabled: !s.enabled } : s))
    );
  };

  const handleAddStep = () => {
    setEditingStep(null);
    form.resetFields();
    setIsModalVisible(true);
  };

  // üéØ ÊâßË°åÂΩìÂâçÊûÑÂª∫Âô®‰∏≠ÁöÑËÑöÊú¨ÔºàÊó†ÂèÇÊï∞Ôºâ
  const handleExecuteCurrentScript = async () => {
    if (!currentDeviceId) {
      message.warning('ËØ∑ÂÖàËøûÊé•ËÆæÂ§á');
      return;
    }
    
    setIsExecuting(true);
    try {
      // üîÑ ÊâßË°åÂΩìÂâçÊûÑÂª∫Âô®‰∏≠ÁöÑÊ≠•È™§
      console.log('üéØ ÊâßË°åÂΩìÂâçËÑöÊú¨ÔºåÊ≠•È™§Êï∞:', steps.length, 'ËÆæÂ§á:', currentDeviceId);
      // ËøôÈáåÂ∫îËØ•Ë∞ÉÁî®ÂÆûÈôÖÁöÑËÑöÊú¨ÊâßË°åÈÄªËæë
      // ÊöÇÊó∂‰ΩøÁî®ÁÆÄÂåñÁöÑÈÄªËæë
      message.success("ÂΩìÂâçËÑöÊú¨ÊâßË°åÂÆåÊàê");
    } catch (error) {
      console.error("ËÑöÊú¨ÊâßË°åÂ§±Ë¥•:", error);
      message.error("ËÑöÊú¨ÊâßË°åÂ§±Ë¥•");
    } finally {
      setIsExecuting(false);
    }
  };

  // üéØ ÊâßË°åËÑöÊú¨ÁÆ°ÁêÜÂô®‰∏≠ÈÄâ‰∏≠ÁöÑËÑöÊú¨ÔºàÂ∏¶ scriptId ÂèÇÊï∞Ôºâ
  const handleExecuteScriptFromManager = async (scriptId: string) => {
    if (!currentDeviceId) {
      message.warning('ËØ∑ÂÖàËøûÊé•ËÆæÂ§á');
      return;
    }
    
    setIsExecuting(true);
    try {
      // üîÑ ‰ΩøÁî®ËÑöÊú¨ÁÆ°ÁêÜÂô®ÊâßË°åÊåáÂÆöÁöÑËÑöÊú¨
      console.log('üéØ ÊâßË°åËÑöÊú¨ÁÆ°ÁêÜÂô®‰∏≠ÁöÑËÑöÊú¨:', scriptId, 'ËÆæÂ§á:', currentDeviceId);
      // ËøôÈáåÂ∫îËØ•Ë∞ÉÁî®ÂÆûÈôÖÁöÑËÑöÊú¨ÊâßË°åÈÄªËæë
      // ÊöÇÊó∂‰ΩøÁî®ÁÆÄÂåñÁöÑÈÄªËæë
      message.success(`ËÑöÊú¨ ${scriptId} ÊâßË°åÂÆåÊàê`);
    } catch (error) {
      console.error("ËÑöÊú¨ÊâßË°åÂ§±Ë¥•:", error);
      message.error("ËÑöÊú¨ÊâßË°åÂ§±Ë¥•");
    } finally {
      setIsExecuting(false);
    }
  };

  const handleLoadScriptFromManager = (
    loadedSteps: ExtendedSmartScriptStep[],
    config?: ExecutorConfig
  ) => {
    setSteps(loadedSteps);
    if (config) {
      setExecutorConfig(config);
    }
    message.success("ËÑöÊú¨Âä†ËΩΩÊàêÂäü");
  };

  // ==================== Ê∏≤Êüì ====================
  return (
    <div className="p-6">
      {/* È°µÈù¢Ê†áÈ¢ò */}
      <PageHeader
        devices={devices}
        currentDeviceId={currentDeviceId}
        onDeviceChange={setCurrentDeviceId}
        onRefreshDevices={refreshDevices}
        onQuickAddApp={() => setShowAppComponent(true)}
      />

      <Row gutter={16} className="h-full">
        {/* Â∑¶‰æßÔºöÂèØÊãñÊãΩÁöÑÊ≠•È™§ÂàóË°® */}
        <Col span={16}>
          <StepListPanel
            steps={steps}
            setSteps={setSteps}
            loopConfigs={loopConfigs}
            setLoopConfigs={setLoopConfigs}
            currentDeviceId={currentDeviceId}
            devices={devices}
            handleEditStep={handleEditStep}
            openQuickPageFinder={pageFinderHook.openQuickPageFinder}
            handleEditStepParams={pageFinderHook.openPageFinderForStep}
            handleAddStep={handleAddStep}
          />
        </Col>

        {/* Âè≥‰æßÔºöÊéßÂà∂Èù¢Êùø */}
        <Col span={8}>
          <ScriptControlPanel
            steps={steps}
            executorConfig={executorConfig}
            setExecutorConfig={setExecutorConfig}
            executionResult={executionResult}
            isExecuting={isExecuting}
            currentDeviceId={currentDeviceId}
            onExecuteScript={handleExecuteCurrentScript}
            onLoadScript={handleLoadScriptFromManager}
            onUpdateSteps={setSteps}
            onUpdateConfig={setExecutorConfig}
          />
        </Col>
      </Row>

      {/* Ê®°ÊÄÅÊ°ÜÁªÑ‰ª∂ */}
      <SmartStepEditorModal
        visible={isModalVisible}
        onOk={stepFormHook.handleSaveStep}
        onCancel={() => {
          setIsModalVisible(false);
          form?.resetFields();
        }}
        form={form}
        currentDeviceId={currentDeviceId}
        editingStep={editingStep}
        onOpenSmartNavigation={() => setShowNavigationModal(true)}
        onOpenPageAnalyzer={() => pageFinderHook.openQuickPageFinder()}
      />

      {/* Âø´ÈÄüÂ∫îÁî®ÈÄâÊã©Modal */}
      {/* ... ÂÖ∂‰ªñÊ®°ÊÄÅÊ°ÜÁªÑ‰ª∂ ... */}
    </div>
  );
};

export default SmartScriptBuilderPage;
