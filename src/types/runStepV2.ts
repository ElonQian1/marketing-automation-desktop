// src/types/runStepV2.ts
// module: types | layer: domain | role: RunStep V2 ÂçèËÆÆÂÆö‰πâ
// summary: ÂâçÂêéÁ´ØÁªü‰∏ÄÁöÑ RunStep V2 ËØ∑Ê±ÇÂìçÂ∫îÂçèËÆÆÔºåËß£ÂÜ≥Á≠ñÁï•Â≠óÊÆµÂíåÂä®‰ΩúÂèÇÊï∞ÈóÆÈ¢ò

import type { StepActionParams } from './stepActions';
import type { StructuredSelector } from './structuredSelector';

export type ActionType = 
  | 'tap' 
  | 'doubleTap' 
  | 'longPress'
  | 'swipe' 
  | 'type' 
  | 'wait' 
  | 'back';

export type StrategyKind = 'intelligent' | 'standard' | 'absolute' | 'custom';
export type StepRunMode = 'match-only' | 'execute-step';

export interface Bounds { 
  left: number; 
  top: number; 
  right: number; 
  bottom: number; 
}

export interface Offset { 
  x: number; 
  y: number; 
}

export interface RetryPolicy { 
  max: number; 
  interval_ms: number; 
}

export interface VerifySpec {
  type: 'exists' | 'text' | 'gone';
  timeout_ms: number;
  expected_text?: string;
}

export interface BaseStep {
  step_id: string;
  selector?: string;                 // element_element_63 / XPath Á≠âÔºàÂÖºÂÆπÊóßÁâàÔºâ
  structured_selector?: StructuredSelector; // üÜï ÁªìÊûÑÂåñÈÄâÊã©Âô®ÂØπË±°
  selector_preferred?: boolean;      // ÈÄâÊã©Âô®‰ºòÂÖà
  bounds?: Bounds;                   // ÂÖúÂ∫ïÂùêÊ†á
  fallback_to_bounds?: boolean;      // ÊâìÂºÄÊâç‰ºöÁî®ÂùêÊ†áÂÖúÂ∫ï
  // üõ°Ô∏è ÂÆâÂÖ®‰∏éË¥®ÈáèÊéßÂà∂
  require_uniqueness?: boolean;      // Âº∫Âà∂ÂîØ‰∏ÄÊÄßÁ∫¶Êùü
  min_confidence?: number;           // ÊúÄ‰ΩéÁΩÆ‰ø°Â∫¶ÈòàÂÄº (0.0-1.0)
  forbid_fullscreen_or_container?: boolean; // Á¶ÅÊ≠¢Êï¥Â±è/ÂÆπÂô®ËäÇÁÇπ
  revalidate?: "device_required" | "cache_ok" | "auto"; // ÁºìÂ≠òÁ≠ñÁï•
  retry?: RetryPolicy;
  verify_after?: VerifySpec;         // ÊâßË°åÂêéÈ™åËØÅÔºàÂèØÈÄâÔºâ
}

export type ActionPayload =
  | { action: 'tap' | 'doubleTap' | 'longPress'; press_ms?: number; offset?: Offset }
  | { action: 'swipe'; direction: 'up'|'down'|'left'|'right'; distance_dp?: number; duration_ms?: number; start?: 'center'|'edge'|'custom'; start_offset?: Offset }
  | { action: 'type'; text: string; secure?: boolean; clear?: boolean; submit?: boolean }
  | { action: 'wait'; duration_ms: number }
  | { action: 'back' };

export type StepPayload = BaseStep & ActionPayload;

export interface RunStepRequestV2 {
  device_id: string;
  mode: StepRunMode;                 // 'match-only' or 'execute-step'
  strategy: StrategyKind;            // ‚úÖ È°∂Â±ÇÂøÖÈ°ªÊê∫Â∏¶
  step: StepPayload;
}

export interface MatchCandidate {
  id: string;
  score: number;           // ÁÆóÊ≥ïÂåπÈÖçÂàÜÔºà0~1Ôºâ
  confidence: number;      // ÁΩÆ‰ø°Â∫¶Ôºà0~1Ôºâ
  bounds: Bounds;
  text?: string;
  class_name?: string;
  package_name?: string;
}

export interface RunStepResponseV2 {
  ok: boolean;
  message: string;
  matched?: MatchCandidate;     // match-only ËøîÂõûÂÆÉÔºõexecute-step ‰πü‰ºöÂ∏¶‰∏ä
  executed_action?: ActionType; // execute-step ÊàêÂäüÊâçÊúâ
  verify_passed?: boolean;      // Ëã•ÈÖçÁΩÆ verify_afterÔºå‰ºöËøîÂõû
  error_code?: string;          // 'NO_CANDIDATE' | 'INVALID_ARGS' | 'ADB_ERROR' ...
  raw_logs?: string[];          // ÂèØÈÄâÔºöÊñπ‰æø‰Ω†ÊääÂêéÁ´ØÂÖ≥ÈîÆÊó•ÂøóÊäõÁªôÂâçÁ´ØÊòæÁ§∫
}

// ÈîôËØØÁ†ÅÂ∏∏Èáè
export const ERROR_CODES = {
  INVALID_ARGS: 'INVALID_ARGS',
  NO_CANDIDATE: 'NO_CANDIDATE', 
  ADB_ERROR: 'ADB_ERROR',
  VERIFY_FAILED: 'VERIFY_FAILED',
  UNSUPPORTED_ACTION: 'UNSUPPORTED_ACTION',
} as const;

// ‰ªéÊñ∞Âä®‰ΩúÁ≥ªÁªüËΩ¨Êç¢‰∏∫ V2 ÂçèËÆÆÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞
export function convertToV2Request(
  deviceId: string,
  mode: StepRunMode,
  stepCard: import('./stepActions').StepCardModel,
  structuredSelector?: StructuredSelector
): RunStepRequestV2 {
  const { currentAction, common, selectorId } = stepCard;
  
  // Âü∫Á°ÄÊ≠•È™§‰ø°ÊÅØ
  const baseStep: BaseStep = {
    step_id: stepCard.id,
    selector: selectorId, // ÂÖºÂÆπÊóßÁâàÂÜÖÈÉ®ID
    structured_selector: structuredSelector, // üÜï ÁªìÊûÑÂåñÈÄâÊã©Âô®ÂØπË±°
    selector_preferred: common.useSelector,
    fallback_to_bounds: common.allowAbsolute,
    // üõ°Ô∏è ÂÆâÂÖ®ÈÖçÁΩÆÔºàÊåâ‰∏•Ê†ºÊ†áÂáÜÔºâ
    require_uniqueness: true, // Âº∫Âà∂ÂîØ‰∏ÄÊÄß
    min_confidence: 0.70, // ÊúÄ‰ΩéÁΩÆ‰ø°Â∫¶ÈòàÂÄºÔºàÊèêÂçáÂà∞0.70Ôºâ
    forbid_fullscreen_or_container: true, // Á¶ÅÊ≠¢Êï¥Â±è/ÂÆπÂô®ËäÇÁÇπ
    revalidate: "device_required", // Ë¶ÅÊ±ÇËÆæÂ§áÈáçÊñ∞È™åËØÅ
    retry: common.retries > 0 ? {
      max: common.retries,
      interval_ms: common.retryBackoffMs
    } : undefined,
    verify_after: common.verifyAfter ? {
      type: 'exists',
      timeout_ms: 3000
    } : undefined,
  };

  // Âä®‰ΩúËΩΩËç∑ËΩ¨Êç¢
  let actionPayload: ActionPayload;
  
  switch (currentAction.type) {
    case 'tap':
    case 'doubleTap': 
    case 'longPress':
      actionPayload = {
        action: currentAction.type,
        press_ms: currentAction.params.pressDurationMs,
        offset: (currentAction.params.offsetX || currentAction.params.offsetY) ? {
          x: currentAction.params.offsetX || 0,
          y: currentAction.params.offsetY || 0
        } : undefined
      };
      break;
      
    case 'swipe':
      actionPayload = {
        action: 'swipe',
        direction: currentAction.params.direction,
        distance_dp: Math.round((currentAction.params.distance || 0.6) * 100), // ËΩ¨Êç¢‰∏∫dp
        duration_ms: currentAction.params.durationMs || 250,
        start: currentAction.params.startFrom === 'element' ? 'center' : 
               currentAction.params.startFrom === 'screenCenter' ? 'center' : 'custom',
        start_offset: currentAction.params.customStart
      };
      break;
      
    case 'type':
      actionPayload = {
        action: 'type',
        text: currentAction.params.text,
        secure: currentAction.params.secure,
        clear: currentAction.params.clearBefore,
        submit: currentAction.params.keyboardEnter
      };
      break;
      
    case 'wait':
      actionPayload = {
        action: 'wait',
        duration_ms: currentAction.params.waitMs || 500
      };
      break;
      
    case 'back':
      actionPayload = {
        action: 'back'
      };
      break;
      
    default:
      const exhaustiveCheck: never = currentAction;
      throw new Error(`Unsupported action type: ${(exhaustiveCheck as StepActionParams).type}`);
  }

  // ÂêàÂπ∂Ê≠•È™§ËΩΩËç∑
  const stepPayload: StepPayload = { ...baseStep, ...actionPayload };

  return {
    device_id: deviceId,
    mode,
    strategy: 'intelligent', // ÈªòËÆ§Êô∫ËÉΩÁ≠ñÁï•
    step: stepPayload
  };
}