/**
 * 精准获客工具函数集
 * 
 * 提供数据验证、格式化、去重等通用功能
 */

import { 
  Platform, 
  TargetType, 
  IndustryTag, 
  RegionTag,
  WatchTarget,
  Comment,
  Task,
  ImportValidationResult,
  ComplianceCheckResult
} from '../types/core';
import { 
  URL_PATTERNS, 
  VALIDATION_RULES, 
  SENSITIVE_WORDS,
  INDUSTRY_TAG_CONFIG,
  REGION_TAG_CONFIG
} from '../constants';

// ==================== 数据验证工具 ====================

/**
 * 验证URL格式
 */
export function validateUrl(url: string, platform: Platform, targetType: TargetType): boolean {
  const patterns = URL_PATTERNS[platform];
  if (!patterns) return false;
  
  if (platform === Platform.PUBLIC) {
    // 公开平台需要额外的白名单验证
    return 'general' in patterns && patterns.general.test(url);
  }
  
  if (targetType === TargetType.VIDEO && 'video' in patterns) {
    return patterns.video.test(url);
  }
  
  if (targetType === TargetType.ACCOUNT && 'user' in patterns) {
    return patterns.user.test(url);
  }
  
  return false;
}

/**
 * 验证行业标签
 */
export function validateIndustryTags(tags: string[]): {
  valid: IndustryTag[];
  invalid: string[];
} {
  const validTags: IndustryTag[] = [];
  const invalidTags: string[] = [];
  
  tags.forEach(tag => {
    const trimmedTag = tag.trim();
    if (Object.values(IndustryTag).includes(trimmedTag as IndustryTag)) {
      validTags.push(trimmedTag as IndustryTag);
    } else {
      invalidTags.push(trimmedTag);
    }
  });
  
  return { valid: validTags, invalid: invalidTags };
}

/**
 * 验证地域标签
 */
export function validateRegionTag(region: string): RegionTag | null {
  const trimmedRegion = region.trim();
  return Object.values(RegionTag).includes(trimmedRegion as RegionTag) 
    ? trimmedRegion as RegionTag 
    : null;
}

/**
 * 验证CSV导入数据
 */
export function validateCsvImportData(data: any[]): ImportValidationResult {
  const validRows: WatchTarget[] = [];
  const invalidRows: Array<{
    row_index: number;
    data: any;
    errors: string[];
  }> = [];
  let duplicateCount = 0;
  
  // 用于检测重复的Set
  const seenKeys = new Set<string>();
  
  data.forEach((row, index) => {
    const errors: string[] = [];
    
    // 检查必填字段
    VALIDATION_RULES.required_fields.forEach(field => {
      if (!row[field]) {
        errors.push(`缺少必填字段: ${field}`);
      }
    });
    
    // 验证枚举值
    if (row.type && !Object.values(TargetType).includes(row.type)) {
      errors.push(`无效的类型: ${row.type}`);
    }
    
    if (row.platform && !Object.values(Platform).includes(row.platform)) {
      errors.push(`无效的平台: ${row.platform}`);
    }
    
    // 验证URL格式
    if (row.id_or_url && row.platform && row.type) {
      if (!validateUrl(row.id_or_url, row.platform, row.type)) {
        errors.push(`无效的URL格式: ${row.id_or_url}`);
      }
    }
    
    // 验证行业标签
    if (row.industry_tags) {
      const tags = row.industry_tags.split(';').filter(Boolean);
      const { invalid } = validateIndustryTags(tags);
      if (invalid.length > 0) {
        errors.push(`无效的行业标签: ${invalid.join(', ')}`);
      }
    }
    
    // 验证地域标签
    if (row.region && !validateRegionTag(row.region)) {
      errors.push(`无效的地域标签: ${row.region}`);
    }
    
    // 检查去重键
    const dedupKey = generateDedupKey(row.platform, row.id_or_url);
    if (seenKeys.has(dedupKey)) {
      duplicateCount++;
    } else {
      seenKeys.add(dedupKey);
    }
    
    if (errors.length > 0) {
      invalidRows.push({
        row_index: index,
        data: row,
        errors
      });
    } else {
      // 转换为标准格式
      const watchTarget: WatchTarget = {
        id: generateId('wt'),
        target_type: row.type,
        platform: row.platform,
        platform_id_or_url: row.id_or_url,
        title: row.title || undefined,
        source: row.source,
        industry_tags: row.industry_tags ? 
          validateIndustryTags(row.industry_tags.split(';')).valid : 
          undefined,
        region_tag: row.region ? validateRegionTag(row.region) || undefined : undefined,
        notes: row.notes || undefined,
        created_at: new Date(),
        updated_at: new Date()
      };
      
      validRows.push(watchTarget);
    }
  });
  
  return {
    valid_rows: validRows,
    invalid_rows: invalidRows,
    summary: {
      total: data.length,
      valid: validRows.length,
      invalid: invalidRows.length,
      duplicates: duplicateCount
    }
  };
}

// ==================== 去重工具 ====================

/**
 * 生成去重键
 */
export function generateDedupKey(platform: Platform, identifier: string): string {
  return `${platform}:${identifier}`;
}

/**
 * 生成评论去重键
 */
export function generateCommentDedupKey(platform: Platform, commentId: string): string {
  return btoa(`comment:${platform}:${commentId}`);
}

/**
 * 生成用户去重键
 */
export function generateUserDedupKey(platform: Platform, userId: string): string {
  return btoa(`user:${platform}:${userId}`);
}

// ==================== ID生成工具 ====================

/**
 * 生成唯一ID（类似雪花算法的简化版）
 */
export function generateId(prefix: string = ''): string {
  const timestamp = Date.now().toString(36);
  const random = Math.random().toString(36).substring(2, 8);
  return prefix ? `${prefix}_${timestamp}${random}` : `${timestamp}${random}`;
}

// ==================== 格式化工具 ====================

/**
 * 格式化行业标签显示
 */
export function formatIndustryTags(tags: IndustryTag[]): string {
  return tags.map(tag => INDUSTRY_TAG_CONFIG[tag]?.label || tag).join(', ');
}

/**
 * 格式化地域标签显示
 */
export function formatRegionTag(region: RegionTag): string {
  return REGION_TAG_CONFIG[region]?.label || region;
}

/**
 * 格式化时间显示
 */
export function formatDateTime(date: Date): string {
  return date.toLocaleString('zh-CN', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  });
}

/**
 * 格式化时间范围显示
 */
export function formatTimeRange(startDate: Date, endDate: Date): string {
  const formatDate = (date: Date) => date.toLocaleDateString('zh-CN');
  
  if (formatDate(startDate) === formatDate(endDate)) {
    return formatDate(startDate);
  }
  
  return `${formatDate(startDate)} ~ ${formatDate(endDate)}`;
}

// ==================== 数据转换工具 ====================

/**
 * 将CSV行转换为WatchTarget
 */
export function csvRowToWatchTarget(row: any): WatchTarget {
  return {
    id: generateId('wt'),
    target_type: row.type,
    platform: row.platform,
    platform_id_or_url: row.id_or_url,
    title: row.title || undefined,
    source: row.source,
    industry_tags: row.industry_tags ? 
      row.industry_tags.split(';').filter(Boolean) : 
      undefined,
    region_tag: row.region || undefined,
    notes: row.notes || undefined,
    created_at: new Date(),
    updated_at: new Date()
  };
}

/**
 * 将WatchTarget转换为CSV行
 */
export function watchTargetToCsvRow(target: WatchTarget): any {
  return {
    type: target.target_type,
    platform: target.platform,
    id_or_url: target.platform_id_or_url,
    title: target.title || '',
    source: target.source,
    industry_tags: target.industry_tags?.join(';') || '',
    region: target.region_tag || '',
    notes: target.notes || '',
    created_at: formatDateTime(target.created_at)
  };
}

// ==================== 内容安全工具 ====================

/**
 * 敏感词检测
 */
export function detectSensitiveWords(text: string): {
  hasSensitive: boolean;
  sensitiveWords: string[];
  cleanText: string;
} {
  const sensitiveWords: string[] = [];
  let cleanText = text;
  
  SENSITIVE_WORDS.forEach(word => {
    if (text.includes(word)) {
      sensitiveWords.push(word);
      cleanText = cleanText.replace(new RegExp(word, 'g'), '*'.repeat(word.length));
    }
  });
  
  return {
    hasSensitive: sensitiveWords.length > 0,
    sensitiveWords,
    cleanText
  };
}

/**
 * 话术模板变量解析
 */
export function parseTemplateVariables(template: string): string[] {
  const regex = /\{\{(\w+)\}\}/g;
  const variables: string[] = [];
  let match;
  
  while ((match = regex.exec(template)) !== null) {
    if (!variables.includes(match[1])) {
      variables.push(match[1]);
    }
  }
  
  return variables;
}

/**
 * 话术模板变量替换
 */
export function replaceTemplateVariables(
  template: string, 
  variables: Record<string, string>
): string {
  let result = template;
  
  Object.entries(variables).forEach(([key, value]) => {
    const regex = new RegExp(`\\{\\{${key}\\}\\}`, 'g');
    result = result.replace(regex, value);
  });
  
  return result;
}

// ==================== 统计工具 ====================

/**
 * 计算任务执行成功率
 */
export function calculateSuccessRate(tasks: Task[]): number {
  if (tasks.length === 0) return 0;
  
  const completedTasks = tasks.filter(task => task.status === 'DONE').length;
  return Math.round((completedTasks / tasks.length) * 100);
}

/**
 * 按状态分组统计任务
 */
export function groupTasksByStatus(tasks: Task[]): Record<string, number> {
  return tasks.reduce((acc, task) => {
    acc[task.status] = (acc[task.status] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);
}

/**
 * 按日期分组统计
 */
export function groupByDate<T extends { created_at: Date }>(
  items: T[], 
  dateField: keyof T = 'created_at' as keyof T
): Record<string, T[]> {
  return items.reduce((acc, item) => {
    const date = (item[dateField] as Date).toDateString();
    if (!acc[date]) {
      acc[date] = [];
    }
    acc[date].push(item);
    return acc;
  }, {} as Record<string, T[]>);
}

// ==================== 合规检查工具 ====================

/**
 * 合规性检查
 */
export function checkCompliance(target: WatchTarget): ComplianceCheckResult {
  const violations: string[] = [];
  const warnings: string[] = [];
  let sourceVerified = false;
  let whitelistApproved = false;
  
  // 检查来源合规性
  if (target.platform === Platform.PUBLIC && target.source === 'whitelist') {
    // 这里应该调用白名单验证服务
    whitelistApproved = true; // 假设通过
    sourceVerified = true;
  } else if (target.platform === Platform.DOUYIN || target.platform === Platform.OCEANENGINE) {
    sourceVerified = true;
  }
  
  // 检查URL格式
  if (!validateUrl(target.platform_id_or_url, target.platform, target.target_type)) {
    violations.push('URL格式不符合平台规范');
  }
  
  // 检查敏感内容
  if (target.title) {
    const { hasSensitive, sensitiveWords } = detectSensitiveWords(target.title);
    if (hasSensitive) {
      warnings.push(`标题包含敏感词: ${sensitiveWords.join(', ')}`);
    }
  }
  
  return {
    passed: violations.length === 0,
    violations,
    warnings,
    source_verified: sourceVerified,
    whitelist_approved: whitelistApproved
  };
}

// ==================== 导出工具 ====================

/**
 * 生成CSV内容
 */
export function generateCsvContent(data: any[], columns: Array<{key: string, label: string}>): string {
  // CSV头部
  const headers = columns.map(col => col.label).join(',');
  
  // CSV数据行
  const rows = data.map(row => 
    columns.map(col => {
      const value = row[col.key] || '';
      // 处理包含逗号的值
      return typeof value === 'string' && value.includes(',') 
        ? `"${value}"` 
        : value;
    }).join(',')
  );
  
  return [headers, ...rows].join('\n');
}

/**
 * 下载CSV文件
 */
export function downloadCsv(content: string, filename: string): void {
  const blob = new Blob(['\uFEFF' + content], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  
  if (link.download !== undefined) {
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', filename);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
}