// src/modules/enhanced-step-card/EnhancedStepCard.tsx
// module: shared | layer: unknown | role: module-component
// summary: Ê®°ÂùóÁªÑ‰ª∂

/**
 * Â¢ûÂº∫Ê≠•È™§Âç°ÁâáÁªÑ‰ª∂
 * ÂåÖÂê´ÂÆåÊï¥ÁöÑÂÖÉÁ¥†‰ø°ÊÅØÂíåXMLÊ£ÄÊü•Âô®ÂäüËÉΩ
 * 
 * @deprecated ‚ö†Ô∏è Ê≠§ÁªÑ‰ª∂ÂäüËÉΩÁâπÊÆäÔºåÂª∫ËÆÆËØÑ‰º∞ÊòØÂê¶ÂèØ‰ª•Êï¥ÂêàÂà∞ StepCardSystem
 * 
 * ü§î ‰ΩøÁî®ÂâçËØ∑ËÄÉËôëÔºö
 * - ÊòØÂê¶ÂèØ‰ª•ÈÄöËøá StepCardSystem ÁöÑÈÖçÁΩÆÂÆûÁé∞Áõ∏ÂêåÂäüËÉΩÔºü
 * - ÊòØÂê¶ÂèØ‰ª•Â∞ÜÂÖÉÁ¥†Ê£ÄÊü•Âô®ÂäüËÉΩ‰Ωú‰∏∫Êèí‰ª∂ÈõÜÊàêÔºü
 * 
 * Â¶ÇÊûúÂøÖÈ°ª‰ΩøÁî®ÔºåËØ∑Ê∑ªÂä†Ê≥®ÈáäËØ¥ÊòéÁâπÊÆäÁî®ÈÄîÂéüÂõ†„ÄÇ
 */

import React, { useState } from 'react';
import { noDragProps } from '../../components/universal-ui/dnd/noDrag';
import { 
  Card, 
  Tag, 
  Button, 
  Space, 
  Typography, 
  Descriptions, 
  Tooltip,
  Badge,
  Popover
} from 'antd';
import {
  EditOutlined,
  BugOutlined,
  EyeOutlined,
  InfoCircleOutlined,
  AndroidOutlined,
  BranchesOutlined,
  SettingOutlined,
  DragOutlined
} from '@ant-design/icons';
import { SmartScriptStep } from '../../types/smartScript';
import { EnhancedUIElement } from '../enhanced-element-info/types';
import type { ElementBinding } from '../../components/step-card/element-binding/types';
import { resolveBinding } from '../../components/step-card/element-binding/helpers';
import { parseBounds } from '../../components/universal-ui/views/grid-view/utils';
import { XmlInspectorModal } from '../xml-inspector/XmlInspectorModal';

const { Text, Paragraph } = Typography;

interface EnhancedStepCardProps {
  step: SmartScriptStep;
  onEdit: () => void;
  onTest?: () => void;
  onDelete?: () => void;
  isDragging?: boolean;
}

export const EnhancedStepCard: React.FC<EnhancedStepCardProps> = ({
  step,
  onEdit,
  onTest,
  onDelete,
  isDragging
}) => {
  const [showXmlInspector, setShowXmlInspector] = useState(false);
  const dragging = !!isDragging;

  // üîç Ëé∑ÂèñÂ¢ûÂº∫ÂÖÉÁ¥†‰ø°ÊÅØÔºàÂÖºÂÆπÂ§öÁßçÊ†ºÂºèÔºâ
  const enhancedElement = step.parameters?.enhancedElement as EnhancedUIElement | undefined;
  const elementSummary = step.parameters?.elementSummary;
  const xmlSnapshot = step.parameters?.xmlSnapshot as { xmlContent: string; xmlHash?: string; timestamp?: number; deviceInfo?: any } | undefined;
  const elementBinding = step.parameters?.elementBinding as ElementBinding | undefined;
  
  // Ê£ÄÊü•ÊòØÂê¶ÊúâÂ¢ûÂº∫‰ø°ÊÅØÔºàÂÖºÂÆπÁÆÄÂåñÊ†ºÂºèÔºâ
  const hasEnhancedInfo = !!(
    step.parameters?.isEnhanced ||           // ÁÆÄÂåñÊ†áËØÜ
    step.parameters?.xmlCacheId ||           // XMLÁºìÂ≠òID
    step.parameters?.xmlContent ||           // XMLÂÜÖÂÆπ
    enhancedElement?.xmlContext ||           // ÂÆåÊï¥Â¢ûÂº∫‰ø°ÊÅØ
    elementSummary                           // ÂÖÉÁ¥†ÊëòË¶Å
  );

  // ÊûÑÂª∫XMLÊ£ÄÊü•Âô®Êï∞ÊçÆÔºàÂÖºÂÆπ‰∏çÂêåÊ†ºÂºèÔºâ
  const xmlInspectorData = hasEnhancedInfo ? (() => {
    // ‰ºòÂÖàÊù•Ê∫êÔºöÂ¢ûÂº∫ÂÖÉÁ¥†Êê∫Â∏¶ÁöÑ XML
    let xmlContent = step.parameters?.xmlContent || enhancedElement?.xmlContext?.xmlSourceContent || '';
    let xmlCacheId = step.parameters?.xmlCacheId || enhancedElement?.xmlContext?.xmlCacheId || 'unknown';

    // ÂÖ∂Ê¨°ÔºöÊù•Ëá™ xmlSnapshot
    if ((!xmlContent || xmlContent.length === 0) && xmlSnapshot?.xmlContent) {
      xmlContent = xmlSnapshot.xmlContent;
      xmlCacheId = xmlSnapshot.xmlHash || 'snapshot';
    }

    // Âü∫Á°Ä elementInfo
    let elementInfo: any = {
      text: step.parameters?.text || step.parameters?.element_text || '',
      element_type: step.parameters?.element_type || '',
      bounds: step.parameters?.bounds,
      resource_id: step.parameters?.resource_id,
      content_desc: step.parameters?.content_desc
    };

    // Ëã•Â≠òÂú® elementBindingÔºåÂ∞ùËØï‰ªéÂø´ÁÖßËß£ÊûêÂπ∂ËøòÂéüËäÇÁÇπÔºåÂ°´ÂÖÖÂàÜËæ®Â≠óÊÆµ
    if (elementBinding) {
      try {
        const resolved = resolveBinding(elementBinding);
        if (resolved?.node) {
          const a = resolved.node.attrs || {};
          elementInfo = {
            text: a['text'] || elementInfo.text,
            element_type: a['class'] || elementInfo.element_type,
            bounds: (() => {
              const b = a['bounds'];
              if (!b) return elementInfo.bounds;
              const m = b.match(/\[(\d+),(\d+)\]\[(\d+),(\d+)\]/);
              if (m) {
                return { left: Number(m[1]), top: Number(m[2]), right: Number(m[3]), bottom: Number(m[4]) };
              }
              return elementInfo.bounds;
            })(),
            resource_id: a['resource-id'] || elementInfo.resource_id,
            content_desc: a['content-desc'] || elementInfo.content_desc,
          };
        }
      } catch (e) {
        // ÂøΩÁï•Ëß£ÊûêÂ§±Ë¥•Ôºå‰øùÊåÅÁé∞Êúâ elementInfo
        // console.warn('resolveBinding failed: ', e);
      }
    }

    return {
      xmlContent,
      xmlCacheId,
      targetElement: enhancedElement,
      elementInfo,
    };
  })() : null;

  /**
   * Ê∏≤ÊüìÂÖÉÁ¥†‰ø°ÊÅØÊëòË¶ÅÔºàÂÖºÂÆπÂ§öÁßçÊï∞ÊçÆÊ†ºÂºèÔºâ
   */
  const renderElementSummary = () => {
    if (!hasEnhancedInfo) {
      return <Text type="secondary">Âü∫Á°ÄÊ≠•È™§ - Êó†Â¢ûÂº∫‰ø°ÊÅØ</Text>;
    }

    // ÂÖºÂÆπ‰∏çÂêåÊ†ºÂºèËé∑Âèñ‰ø°ÊÅØ
    const displayName = elementSummary?.displayName || 
                       step.parameters?.text || 
                       step.parameters?.element_text || 
                       enhancedElement?.text || 
                       'Êú™Áü•ÂÖÉÁ¥†';
                       
    const elementType = elementSummary?.elementType || 
                       step.parameters?.element_type || 
                       enhancedElement?.element_type || 
                       'Unknown';
                       
    const confidence = (elementSummary?.confidence || 
                       enhancedElement?.smartAnalysis?.confidence || 
                       step.parameters?.smartAnalysis?.confidence || 
                       0) * 100;
                       
    const xmlSource = step.parameters?.xmlCacheId || 
                     elementSummary?.xmlSource || 
                     enhancedElement?.xmlContext?.xmlCacheId || 
                     'unknown';

    return (
      <Space direction="vertical" size="small" style={{ width: '100%' }}>
        <Space>
          <Tag color="blue" icon={<AndroidOutlined />}>
            {elementType}
          </Tag>
          <Text strong>"{displayName}"</Text>
          {confidence > 0 && (
            <Tag color={confidence > 80 ? 'green' : confidence > 60 ? 'orange' : 'red'}>
              ÁΩÆ‰ø°Â∫¶: {Math.round(confidence)}%
            </Tag>
          )}
        </Space>
        
        <Descriptions size="small" column={2} style={{ fontSize: '12px' }}>
          {(step.parameters?.bounds || elementSummary?.position) && (
            <Descriptions.Item label="‰ΩçÁΩÆ" span={2}>
              <Text code style={{ fontSize: '11px' }}>
                {(() => {
                  const b = step.parameters?.bounds as any;
                  if (typeof b === 'string') {
                    const pb = parseBounds(b);
                    if (pb) return `(${pb.x1}, ${pb.y1}) ${pb.w}√ó${pb.h}`;
                  } else if (b && typeof b === 'object') {
                    const w = b.right - b.left;
                    const h = b.bottom - b.top;
                    return `(${b.left}, ${b.top}) ${w}√ó${h}`;
                  }
                  return `(${elementSummary?.position?.x || 0}, ${elementSummary?.position?.y || 0}) ${elementSummary?.position?.width}√ó${elementSummary?.position?.height}`;
                })()}
              </Text>
            </Descriptions.Item>
          )}
          <Descriptions.Item label="XMLÊ∫ê" span={2}>
            <Text code style={{ fontSize: '11px' }}>
              {xmlSource}
            </Text>
          </Descriptions.Item>
          {step.parameters?.deviceName && (
            <Descriptions.Item label="ËÆæÂ§á" span={2}>
              <Text style={{ fontSize: '11px' }}>
                {step.parameters.deviceName} ({step.parameters.deviceId})
              </Text>
            </Descriptions.Item>
          )}
        </Descriptions>
      </Space>
    );
  };

  /**
   * Ê∏≤ÊüìXML‰∏ä‰∏ãÊñá‰ø°ÊÅØÁöÑPopover
   */
  const renderXmlContextPopover = () => {
    if (!enhancedElement) return null;

    const content = (
      <div style={{ maxWidth: 400 }}>
        <Space direction="vertical" size="small">
          <div>
            <Text strong>È°µÈù¢‰ø°ÊÅØ:</Text>
            <br />
            <Text>{enhancedElement.xmlContext.pageInfo.appName} - {enhancedElement.xmlContext.pageInfo.pageName}</Text>
          </div>
          <div>
            <Text strong>Â∫îÁî®ÂåÖÂêç:</Text>
            <br />
            <Text code>{enhancedElement.xmlContext.packageName}</Text>
          </div>
          <div>
            <Text strong>ËäÇÁÇπË∑ØÂæÑ:</Text>
            <br />
            <Text code style={{ fontSize: '11px' }}>
              {enhancedElement.nodePath.xpath}
            </Text>
          </div>
          <div>
            <Text strong>ËäÇÁÇπÁ¥¢Âºï:</Text> {enhancedElement.nodePath.nodeIndex}
          </div>
          <div>
            <Text strong>ÈááÈõÜÊó∂Èó¥:</Text>
            <br />
            <Text>{new Date(enhancedElement.xmlContext.timestamp).toLocaleString()}</Text>
          </div>
        </Space>
      </div>
    );

    return (
      <Popover content={content} title="XML‰∏ä‰∏ãÊñá‰ø°ÊÅØ" placement="top">
        <Button 
          size="small" 
          icon={<InfoCircleOutlined />}
          type="link"
        >
          ‰∏ä‰∏ãÊñá
        </Button>
      </Popover>
    );
  };

  const cardTitle = (
    <Space>
      <Badge 
        status={step.enabled ? "success" : "default"} 
        text={<Text strong>{step.name}</Text>} 
      />
      {hasEnhancedInfo && (
        <Tag color="green">
          Â¢ûÂº∫‰ø°ÊÅØ
        </Tag>
      )}
    </Space>
  );

  const cardActions = [
    <div key="edit" {...noDragProps}>
      <Button 
        icon={<EditOutlined />} 
        type="text" 
        onClick={onEdit}
      >
        ÁºñËæë
      </Button>
    </div>
  ];

  // Â¶ÇÊûúÊúâÂ¢ûÂº∫‰ø°ÊÅØÔºåÊ∑ªÂä†XMLÊ£ÄÊü•Âô®ÊåâÈíÆ
  if (hasEnhancedInfo) {
    cardActions.unshift(
      <div key="xml" {...noDragProps}>
        <Tooltip title="Êü•ÁúãXMLËäÇÁÇπËØ¶ÊÉÖ">
          <Button 
            icon={<BranchesOutlined />} 
            type="text"
            onClick={() => setShowXmlInspector(true)}
          >
            ‰øÆÊîπÂÖÉÁ¥†ÂèÇÊï∞
          </Button>
        </Tooltip>
      </div>
    );
  }

  if (onTest) {
    cardActions.push(
      <div key="test" {...noDragProps}>
        <Button 
          icon={<BugOutlined />} 
          type="text" 
          onClick={onTest}
        >
          ÊµãËØï
        </Button>
      </div>
    );
  }

  return (
    <>
      <div style={{ opacity: dragging ? 0.6 : 1 }}>
        <Card
          title={cardTitle}
          actions={cardActions}
          size="small"
          style={{ 
            marginBottom: 12,
            cursor: dragging ? 'grabbing' : 'grab'
          }}
          extra={
            <Space {...noDragProps}>
              {renderXmlContextPopover()}
              <Tag color="processing">
                #{step.order + 1}
              </Tag>
              {/* ÊãñÊãΩÊâãÊüÑ */}
              <Button 
                icon={<DragOutlined />}
                type="text"
                size="small"
                style={{ 
                  cursor: 'grab',
                  color: dragging ? '#1890ff' : '#8c8c8c'
                }}
              />
            </Space>
          }
        >
          <Space direction="vertical" style={{ width: '100%' }}>
            <Paragraph style={{ margin: 0, fontSize: '13px' }}>
              <Text type="secondary">{step.description}</Text>
            </Paragraph>
            
            <div style={{ 
              padding: '8px', 
              backgroundColor: '#f9f9f9', 
              borderRadius: 4, 
              fontSize: '12px' 
            }}>
              {renderElementSummary()}
            </div>

            {enhancedElement?.smartDescription && (
              <div style={{ 
                marginTop: 8, 
                padding: '6px 8px', 
                backgroundColor: '#e6f7ff', 
                borderRadius: 4,
                borderLeft: '3px solid #1890ff'
              }}>
                <Text style={{ fontSize: '12px' }}>
                  üí° {enhancedElement.smartDescription}
                </Text>
              </div>
            )}
          </Space>
        </Card>
      </div>

      {/* XMLÊ£ÄÊü•Âô®Ê®°ÊÄÅÊ°Ü */}
      {xmlInspectorData && (
        <XmlInspectorModal
          visible={showXmlInspector}
          onClose={() => setShowXmlInspector(false)}
          xmlContent={xmlInspectorData.xmlContent}
          xmlCacheId={xmlInspectorData.xmlCacheId}
          elementInfo={xmlInspectorData.elementInfo}
          enhancedElement={xmlInspectorData.targetElement || null}
        />
      )}
    </>
  );
};

export default EnhancedStepCard;