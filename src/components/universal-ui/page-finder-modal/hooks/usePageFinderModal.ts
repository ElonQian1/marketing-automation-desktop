/**
 * Page Finder Modal ‰∏ªË¶ÅÁä∂ÊÄÅÁÆ°ÁêÜ Hook
 * ‰ªé UniversalPageFinderModal.tsx ‰∏≠ÊèêÂèñÁöÑÁä∂ÊÄÅÈÄªËæë
 */

import { useState, useEffect } from "react";
import { App } from "antd";
import { useAdb } from "../../../../application/hooks/useAdb";
import { UniversalUIAPI } from "../../../../api/universal-ui/UniversalUIAPI";
import type { UIElement } from "../../../../api/universal-ui/types";
import { transformUIElement } from "../../types/index";
import type {
  XmlSnapshot,
  VisualUIElement,
  ViewMode,
  UIMatchCriteria,
  NodeLocator
} from "../types";

export interface UsePageFinderModalProps {
  visible: boolean;
  snapshotOnlyMode?: boolean;
  initialViewMode?: ViewMode;
  loadFromStepXml?: {
    stepId: string;
    xmlCacheId?: string;
    xmlContent?: string;
    deviceId?: string;
    deviceName?: string;
  };
  preselectLocator?: NodeLocator;
  initialMatching?: UIMatchCriteria;
  onSnapshotCaptured?: (snapshot: XmlSnapshot) => void;
  onXmlContentUpdated?: (xmlContent: string, deviceInfo?: any, pageInfo?: any) => void;
  onSnapshotUpdated?: (snapshot: XmlSnapshot) => void;
}

export interface UsePageFinderModalReturn {
  // Áä∂ÊÄÅ
  selectedDevice: string;
  loading: boolean;
  xmlContent: string;
  setXmlContent: (content: string) => void;
  currentXmlCacheId: string;
  viewMode: ViewMode;
  uiElements: UIElement[];
  elements: VisualUIElement[];
  deviceInfo: any;
  setDeviceInfo: (info: any) => void;
  snapshots: XmlSnapshot[];
  
  // ËÆæÂ§áÁõ∏ÂÖ≥
  devices: any[];
  
  // Êìç‰ΩúÊñπÊ≥ï
  setSelectedDevice: (deviceId: string) => void;
  setLoading: (loading: boolean) => void;
  setElements: (elements: VisualUIElement[]) => void;
  refreshDevices: () => Promise<void>;
  captureCurrentPage: (deviceId: string) => Promise<string | null>;
  loadXmlSnapshot: (cachedPage: any) => Promise<boolean>;
  createSnapshot: (xmlContent: string, deviceInfo?: any) => XmlSnapshot;
  setCurrentXmlCacheId: (id: string) => void;
  setViewMode: (mode: ViewMode) => void;
  setUIElements: (elements: UIElement[]) => void;
  
  // ‰∏öÂä°ÊñπÊ≥ï
  handleCaptureCurrentPage: () => Promise<void>;
  handleRefreshDevices: () => Promise<void>;
  handleLoadFromCache: (xmlCacheId: string) => Promise<void>;
}

export const usePageFinderModal = (props: UsePageFinderModalProps): UsePageFinderModalReturn => {
  const {
    visible,
    snapshotOnlyMode,
    initialViewMode = "visual",
    loadFromStepXml,
    preselectLocator,
    initialMatching,
    onSnapshotCaptured,
    onXmlContentUpdated,
    onSnapshotUpdated
  } = props;

  // Ëé∑Âèñ App ‰∏ä‰∏ãÊñá‰∏≠ÁöÑ message API
  const { message } = App.useApp();

  // Ê†∏ÂøÉÁä∂ÊÄÅ
  const [selectedDevice, setSelectedDevice] = useState<string>("");
  const [loading, setLoading] = useState(false);
  const [currentXmlContent, setCurrentXmlContent] = useState<string>("");
  const [currentXmlCacheId, setCurrentXmlCacheId] = useState<string>("");
  const [viewMode, setViewMode] = useState<ViewMode>(initialViewMode);
  const [uiElements, setUIElements] = useState<UIElement[]>([]);
  const [elements, setElements] = useState<VisualUIElement[]>([]);

  // ‰ΩøÁî® ADB Hook
  const { devices, refreshDevices } = useAdb();

  // ËÆæÂ§áËá™Âä®ÈÄâÊã©ÈÄªËæë
  useEffect(() => {
    if (devices.length > 0 && !selectedDevice) {
      // Â¶ÇÊûúÊúâÊù•Ëá™Ê≠•È™§XMLÁöÑËÆæÂ§á‰ø°ÊÅØÔºå‰ºòÂÖàÈÄâÊã©
      if (loadFromStepXml?.deviceId) {
        const foundDevice = devices.find(d => d.id === loadFromStepXml.deviceId);
        if (foundDevice) {
          setSelectedDevice(foundDevice.id);
          return;
        }
      }
      
      // Âê¶ÂàôÈÄâÊã©Á¨¨‰∏Ä‰∏™Âú®Á∫øËÆæÂ§á
      const onlineDevice = devices.find(d => d.isOnline());
      if (onlineDevice) {
        setSelectedDevice(onlineDevice.id);
      }
    }
  }, [devices, selectedDevice, loadFromStepXml?.deviceId]);

  // Ê®°ÊÄÅÊ°ÜÊâìÂºÄÊó∂ÁöÑÂàùÂßãÂåñÈÄªËæë
  useEffect(() => {
    if (visible) {
      handleInitialize();
    }
  }, [visible, loadFromStepXml]);

  // ÂàùÂßãÂåñÂ§ÑÁêÜ
  const handleInitialize = async () => {
    if (loadFromStepXml?.xmlContent) {
      // Â¶ÇÊûúÊúâÈ¢ÑÂä†ËΩΩÁöÑXMLÂÜÖÂÆπÔºåÁõ¥Êé•‰ΩøÁî®
      await handleLoadXmlContent(loadFromStepXml.xmlContent);
    } else if (snapshotOnlyMode && selectedDevice) {
      // ‰ªÖÂø´ÁÖßÊ®°ÂºèÔºåÁ´ãÂç≥ÈááÈõÜ
      await handleCaptureCurrentPage();
    }
  };

  // Â§ÑÁêÜÂä†ËΩΩXMLÂÜÖÂÆπ
  const handleLoadXmlContent = async (xmlContent: string) => {
    try {
      setLoading(true);
      setCurrentXmlContent(xmlContent);
      
      // Ëß£ÊûêUIÂÖÉÁ¥†
      const parsedElements = await UniversalUIAPI.extractPageElements(xmlContent);
      setUIElements(parsedElements);
      
      // ËΩ¨Êç¢‰∏∫ÂèØËßÜÂåñÂÖÉÁ¥†Âπ∂ËÆæÁΩÆÁªô VisualElementView
      const visualElements = parsedElements.map(transformUIElement);
      setElements(visualElements);
      
      // ÂàõÂª∫Âø´ÁÖß
      const snapshot: XmlSnapshot = {
        id: `snapshot_${Date.now()}`,
        xmlContent,
        deviceInfo: loadFromStepXml?.deviceId ? { 
          id: loadFromStepXml.deviceId,
          name: loadFromStepXml.deviceName || "Êú™Áü•ËÆæÂ§á"
        } : undefined,
        pageInfo: { source: "step_xml" },
        timestamp: Date.now()
      };
      
      // ÈÄöÁü•Áà∂ÁªÑ‰ª∂
      onXmlContentUpdated?.(xmlContent, snapshot.deviceInfo, snapshot.pageInfo);
      onSnapshotUpdated?.(snapshot);
      
      message.success("XMLÂÜÖÂÆπÂä†ËΩΩÊàêÂäü");
    } catch (error) {
      console.error("Âä†ËΩΩXMLÂÜÖÂÆπÂ§±Ë¥•:", error);
      message.error("Âä†ËΩΩXMLÂÜÖÂÆπÂ§±Ë¥•");
    } finally {
      setLoading(false);
    }
  };

  // ÈááÈõÜÂΩìÂâçÈ°µÈù¢
  const handleCaptureCurrentPage = async () => {
    if (!selectedDevice) {
      message.warning("ËØ∑ÂÖàÈÄâÊã©ËÆæÂ§á");
      return;
    }

    try {
      setLoading(true);
      
      const result = await UniversalUIAPI.analyzeUniversalUIPage(selectedDevice);
      const xmlContent = result.xmlContent;
      setCurrentXmlContent(xmlContent);
      
      const parsedElements = await UniversalUIAPI.extractPageElements(xmlContent);
      setUIElements(parsedElements);
      
      // ÂàõÂª∫Âø´ÁÖß
      const snapshot: XmlSnapshot = {
        id: `snapshot_${Date.now()}`,
        xmlContent,
        deviceInfo: { id: selectedDevice },
        pageInfo: { source: "live_capture" },
        timestamp: Date.now()
      };
      
      // ‰ªÖÂø´ÁÖßÊ®°ÂºèÁõ¥Êé•ËøîÂõûÂø´ÁÖß
      if (snapshotOnlyMode) {
        onSnapshotCaptured?.(snapshot);
        return;
      }
      
      // ÈÄöÁü•Áà∂ÁªÑ‰ª∂
      onXmlContentUpdated?.(xmlContent, snapshot.deviceInfo, snapshot.pageInfo);
      onSnapshotUpdated?.(snapshot);
      
      message.success("È°µÈù¢ÈááÈõÜÊàêÂäü");
    } catch (error) {
      console.error("ÈááÈõÜÈ°µÈù¢Â§±Ë¥•:", error);
      message.error("ÈááÈõÜÈ°µÈù¢Â§±Ë¥•");
    } finally {
      setLoading(false);
    }
  };

  // Âà∑Êñ∞ËÆæÂ§áÂàóË°®
  const handleRefreshDevices = async () => {
    try {
      await refreshDevices();
      message.success("ËÆæÂ§áÂàóË°®Â∑≤Âà∑Êñ∞");
    } catch (error) {
      console.error("Âà∑Êñ∞ËÆæÂ§áÂ§±Ë¥•:", error);
      message.error("Âà∑Êñ∞ËÆæÂ§áÂ§±Ë¥•");
    }
  };

  // ‰ªéÁºìÂ≠òÂä†ËΩΩ
  const handleLoadFromCache = async (cachedPageOrId: any) => {
    try {
      setLoading(true);
      
      // Â¶ÇÊûú‰º†ÂÖ•ÁöÑÊòØ CachedXmlPage ÂØπË±°ÔºåÁõ¥Êé•‰ΩøÁî®
      let cachedPage = cachedPageOrId;
      
      // Â¶ÇÊûú‰º†ÂÖ•ÁöÑÊòØÂ≠óÁ¨¶‰∏≤ IDÔºåÈúÄË¶ÅÂÖàÊü•ÊâæÂØπÂ∫îÁöÑÈ°µÈù¢ÔºàËøôÈáåÊöÇÊó∂Ë∑≥ËøáÔºåÁõ¥Êé•Â§ÑÁêÜÂØπË±°Ôºâ
      if (typeof cachedPageOrId === 'string') {
        console.warn("‰º†ÂÖ•ÁöÑÊòØ IDÔºå‰ΩÜÂΩìÂâçÂÆûÁé∞ÈúÄË¶ÅÂÆåÊï¥ÁöÑ CachedXmlPage ÂØπË±°");
        throw new Error("ÈúÄË¶ÅÂÆåÊï¥ÁöÑ CachedXmlPage ÂØπË±°Êù•Âä†ËΩΩÂÜÖÂÆπ");
      }
      
      console.log("üîÑ ‰ªéÁºìÂ≠òÂä†ËΩΩÈ°µÈù¢:", cachedPage);
      
      // ‰ΩøÁî® XmlPageCacheService Âä†ËΩΩÁúüÂÆûÁöÑ XML ÂÜÖÂÆπ
      const { XmlPageCacheService } = await import("../../../../services/XmlPageCacheService");
      const pageContent = await XmlPageCacheService.loadPageContent(cachedPage);
      
      console.log("üìÑ Âä†ËΩΩÁöÑ XML ÂÜÖÂÆπÈïøÂ∫¶:", pageContent.xmlContent.length);
      console.log("üéØ ÊèêÂèñÁöÑ UI ÂÖÉÁ¥†Êï∞Èáè:", pageContent.elements.length);
      
      setCurrentXmlCacheId(cachedPage.fileName || cachedPage.id);
      await handleLoadXmlContent(pageContent.xmlContent);
      
    } catch (error) {
      console.error("‚ùå ‰ªéÁºìÂ≠òÂä†ËΩΩÂ§±Ë¥•:", error);
      message.error(`‰ªéÁºìÂ≠òÂä†ËΩΩÂ§±Ë¥•: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  return {
    // Áä∂ÊÄÅ
    selectedDevice,
    loading,
    xmlContent: currentXmlContent,
    setXmlContent: setCurrentXmlContent,
    currentXmlCacheId,
    viewMode,
    uiElements,
    elements,
    deviceInfo: {},
    setDeviceInfo: () => {},
    snapshots: [],
    devices,
    
    // Áä∂ÊÄÅËÆæÁΩÆÊñπÊ≥ï
    setSelectedDevice,
    setLoading,
    setElements,
    refreshDevices: handleRefreshDevices,
    captureCurrentPage: async (deviceId: string) => {
      await handleCaptureCurrentPage();
      return currentXmlContent || null;
    },
    loadXmlSnapshot: async (cachedPage: any) => {
      await handleLoadFromCache(cachedPage);
      return true;
    },
    createSnapshot: (xmlContent: string, deviceInfo?: any) => ({
      id: Date.now().toString(),
      xmlContent,
      deviceInfo,
      pageInfo: {},
      timestamp: Date.now()
    }),
    setCurrentXmlCacheId,
    setViewMode,
    setUIElements,
    
    // ‰∏öÂä°ÊñπÊ≥ï
    handleCaptureCurrentPage,
    handleRefreshDevices,
    handleLoadFromCache
  };
};