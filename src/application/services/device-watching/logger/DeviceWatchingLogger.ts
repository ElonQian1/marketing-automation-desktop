/**
 * ËÆæÂ§áÁõëÂê¨Êó•ÂøóÁÆ°ÁêÜÂô®
 * Êèê‰æõÂàÜÁ∫ßÊó•ÂøóËÆ∞ÂΩïÔºåÁîü‰∫ßÁéØÂ¢ÉÂèØÊéßÂà∂ËØ¶ÁªÜÁ®ãÂ∫¶
 */

export enum LogLevel {
  SILENT = 0,    // ÈùôÈªòÊ®°ÂºèÔºå‰ªÖËÆ∞ÂΩïÈîôËØØ
  ERROR = 1,     // ‰ªÖÈîôËØØ
  WARN = 2,      // Ë≠¶Âëä + ÈîôËØØ
  INFO = 3,      // ÂÖ≥ÈîÆ‰ø°ÊÅØ + Ë≠¶Âëä + ÈîôËØØ
  DEBUG = 4,     // ËØ¶ÁªÜË∞ÉËØï + ‰ª•‰∏äÊâÄÊúâ
  VERBOSE = 5    // ÊúÄËØ¶ÁªÜÔºàÂåÖÂê´ÊâÄÊúâËØäÊñ≠‰ø°ÊÅØÔºâ
}

class DeviceWatchingLogger {
  private static instance: DeviceWatchingLogger | null = null;
  private currentLevel: LogLevel;

  private constructor() {
    // Ê†πÊçÆÁéØÂ¢ÉÂèòÈáèÊàñÈÖçÁΩÆÁ°ÆÂÆöÊó•ÂøóÁ∫ßÂà´
    const envLevel = process.env.DEVICE_WATCHING_LOG_LEVEL;
    const isDevelopment = process.env.NODE_ENV === 'development';
    
    if (envLevel) {
      this.currentLevel = parseInt(envLevel) as LogLevel;
    } else {
      // ÂºÄÂèëÁéØÂ¢ÉÈªòËÆ§ INFOÔºåÁîü‰∫ßÁéØÂ¢ÉÈªòËÆ§ WARN
      this.currentLevel = isDevelopment ? LogLevel.INFO : LogLevel.WARN;
    }
  }

  static getInstance(): DeviceWatchingLogger {
    if (!this.instance) {
      this.instance = new DeviceWatchingLogger();
    }
    return this.instance;
  }

  setLevel(level: LogLevel): void {
    this.currentLevel = level;
  }

  getLevel(): LogLevel {
    return this.currentLevel;
  }

  error(message: string, data?: any, source?: string): void {
    if (this.currentLevel >= LogLevel.ERROR) {
      const prefix = source ? `‚ùå [${source}]` : '‚ùå';
      if (data) {
        console.error(`${prefix} ${message}`, data);
      } else {
        console.error(`${prefix} ${message}`);
      }
    }
  }

  warn(message: string, data?: any, source?: string): void {
    if (this.currentLevel >= LogLevel.WARN) {
      const prefix = source ? `‚ö†Ô∏è [${source}]` : '‚ö†Ô∏è';
      if (data) {
        console.warn(`${prefix} ${message}`, data);
      } else {
        console.warn(`${prefix} ${message}`);
      }
    }
  }

  info(message: string, data?: any, source?: string): void {
    if (this.currentLevel >= LogLevel.INFO) {
      const prefix = source ? `‚ÑπÔ∏è [${source}]` : '‚ÑπÔ∏è';
      if (data) {
        console.log(`${prefix} ${message}`, data);
      } else {
        console.log(`${prefix} ${message}`);
      }
    }
  }

  debug(message: string, data?: any, source?: string): void {
    if (this.currentLevel >= LogLevel.DEBUG) {
      const prefix = source ? `üîß [${source}]` : 'üîß';
      if (data) {
        console.log(`${prefix} ${message}`, data);
      } else {
        console.log(`${prefix} ${message}`);
      }
    }
  }

  verbose(message: string, data?: any, source?: string): void {
    if (this.currentLevel >= LogLevel.VERBOSE) {
      const prefix = source ? `üîç [${source}]` : 'üîç';
      if (data) {
        console.log(`${prefix} ${message}`, data);
      } else {
        console.log(`${prefix} ${message}`);
      }
    }
  }

  // ÁâπÊÆäÊñπÊ≥ïÔºöÂÖ≥ÈîÆ‰∫ã‰ª∂ÔºàÊÄªÊòØËÆ∞ÂΩïÔºåÈô§ÈùûÈùôÈªòÊ®°ÂºèÔºâ
  critical(message: string, data?: any, source?: string): void {
    if (this.currentLevel > LogLevel.SILENT) {
      const prefix = source ? `üö® [${source}]` : 'üö®';
      if (data) {
        console.log(`${prefix} ${message}`, data);
      } else {
        console.log(`${prefix} ${message}`);
      }
    }
  }

  // ÊÄßËÉΩÊµãÈáèÔºà‰ªÖÂú® DEBUG Âèä‰ª•‰∏äÁ∫ßÂà´Ôºâ
  time(label: string): void {
    if (this.currentLevel >= LogLevel.DEBUG) {
      console.time(`‚è±Ô∏è ${label}`);
    }
  }

  timeEnd(label: string): void {
    if (this.currentLevel >= LogLevel.DEBUG) {
      console.timeEnd(`‚è±Ô∏è ${label}`);
    }
  }
}

export const deviceWatchingLogger = DeviceWatchingLogger.getInstance();
export { DeviceWatchingLogger };